{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","marker2x","iconUrl","marker","shadowUrl","markerShadow","client","ApolloClient","uri","GET_LATEST_PROFILES","gql","ArgoTable","loading","error","data","argo_profiles","map","file","float_id","date","geography","key","Markers","CircleMarker","radius","center","coordinates","Popup","href","App","props","state","collapsed","selected","number","this","setState","id","query","variables","result","position","closeIcon","onOpen","bind","onClose","header","icon","Map","className","zoom","TileLayer","attribute","url","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0wBAoBOA,IAAEC,KAAKC,QAAQC,UAAUC,YAEhCJ,IAAEC,KAAKC,QAAQG,aAAa,CAC1BC,cAAeC,IACfC,QAASC,IACTC,UAAWC,MAIb,IAAMC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,sCAIDC,EAAsBC,YAAH,KAYnBC,EAAY,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACnC,OAAIF,EAAgB,yCAChBC,EAAc,wCAEXC,EAAKC,cAAcC,KAAI,gBAAEC,EAAF,EAAEA,KAAOC,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,KAAnB,EAAyBC,UAAzB,OAC5B,yBAAKC,IAAKJ,GACR,2BAAIC,EAAJ,KAAgBC,QAKhBG,EAAU,SAAC,GAA8B,IAA5BV,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAEjC,OAAIF,EAAgB,yCAChBC,EAAc,wCAEXC,EAAKC,cAAcC,KAAI,gBAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,SAAUE,EAAlB,EAAkBA,UAAlB,OAC5B,kBAACG,EAAA,EAAD,CAAcF,IAAKJ,EAAMO,OAAQ,EAAGC,OAAQ,CAACL,EAAUM,YAAY,GAAIN,EAAUM,YAAY,KAC3F,kBAACC,EAAA,EAAD,KACE,2CAAiBT,GAEjB,uBAAGU,KAAM,yCAA0CX,GAAnD,0BAgEOY,E,YAvDb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,WAAW,EACXC,SAAU,WACVC,OAAQ,IALM,E,uEAUhBC,KAAKC,SAAS,CAACJ,WAAW,M,6BAGrBK,GACLF,KAAKC,SAAS,CACZJ,WAAW,EACXC,SAAUI,M,+BAIL,IAAD,OACN,OACE,kBAAC,IAAD,CAAgB/B,OAAQA,GACtB,kBAAC,IAAD,CAAOgC,MAAO7B,EAAqB8B,UAAW,CAACL,OAAOC,KAAKJ,MAAMG,UAC5D,SAACM,GACA,OACE,6BACE,kBAAC,IAAD,CACEH,GAAG,UACHI,SAAS,QACTT,UAAW,EAAKD,MAAMC,UACtBU,UAAW,kBAAC,IAAD,MACTT,SAAU,EAAKF,MAAME,SACrBU,OAAQ,EAAKA,OAAOC,KAAK,GACzBC,QAAS,EAAKA,QAAQD,KAAK,IAE3B,kBAAC,IAAD,CAAKP,GAAG,WAAWS,OAAO,cAAcC,KAAM,kBAAC,IAAD,OAC5C,6BACE,kBAAC,EAAcP,MAIrB,kBAACQ,EAAA,EAAD,CAAKC,UAAU,WAAWxB,OAAQ,CAAC,EAAE,GAAIyB,KAAM,GAC7C,kBAACC,EAAA,EAAD,CAAWC,UAAU,GAAGC,IAAK,uDAC7B,kBAAC,EAAYb,a,GA9CjBc,aC9DEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ca0d5145.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { Map, TileLayer } from 'react-leaflet';\nimport { CircleMarker, Popup } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { Sidebar, Tab } from 'react-leaflet-sidetabs';\n\nimport ApolloClient from \"apollo-boost\";\nimport { gql } from \"apollo-boost\";\n\nimport { ApolloProvider } from \"react-apollo\";\nimport { Query } from \"react-apollo\";\n\nimport { FiHome, FiChevronRight, FiSearch, FiSettings } from \"react-icons/fi\";\n\nimport L from 'leaflet';\nimport marker from 'leaflet/dist/images/marker-icon.png';\nimport marker2x from 'leaflet/dist/images/marker-icon-2x.png';\nimport markerShadow from 'leaflet/dist/images/marker-shadow.png';\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: marker2x,\n  iconUrl: marker,\n  shadowUrl: markerShadow\n});\n\n\nconst client = new ApolloClient({\n  uri: \"https://cchdo.ucsd.edu/v1/graphql\"\n});\n\n\nconst GET_LATEST_PROFILES = gql`\n        query LatestProfiles($number: Int!){\n          argo_profiles(limit: $number, order_by: {date: desc}, where: { _and: {geography: {_is_null: false}, date: {_is_null: false}}}) {\n            date\n            float_id\n            geography\n            file\n          }\n        }\n`;\n\n\nconst ArgoTable = ({ loading, error, data }) => {\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error ...</p>;\n\n  return data.argo_profiles.map(({file,  float_id, date, geography }) => (\n    <div key={file}>\n      <p>{float_id}: {date}</p>\n    </div>\n  ));\n}\n\nconst Markers = ({ loading, error, data }) => {\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error ...</p>;\n\n  return data.argo_profiles.map(({file, float_id, geography }) => (\n    <CircleMarker key={file} radius={5} center={[geography.coordinates[1], geography.coordinates[0]]}>\n      <Popup>\n        <h3>Argo Float: {float_id}</h3>\n\n        <a href={\"ftp://ftp.ifremer.fr/ifremer/argo/dac/\" +file}>Download Profile</a>\n      </Popup>\n    </CircleMarker>\n  ));\n}\n\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      collapsed: false,\n      selected: 'firstten',\n      number: 10\n    }\n  }\n\n  onClose() {\n    this.setState({collapsed: true});\n  }\n\n  onOpen(id) {\n    this.setState({\n      collapsed: false,\n      selected: id,\n    })\n  }\n\n  render(){\n    return(\n      <ApolloProvider client={client}>\n        <Query query={GET_LATEST_PROFILES} variables={{number:this.state.number}}>\n            {(result) => {\n              return (\n                <div>\n                  <Sidebar\n                    id=\"sidebar\"\n                    position=\"right\"\n                    collapsed={this.state.collapsed}\n                    closeIcon={<FiChevronRight />}\n                      selected={this.state.selected}\n                      onOpen={this.onOpen.bind(this)}\n                      onClose={this.onClose.bind(this)}\n                    >\n                      <Tab id=\"firstten\" header=\"First Fifty\" icon={<FiSearch />}>\n                        <div>\n                          <ArgoTable {...result} />\n                        </div>\n                      </Tab>\n                    </Sidebar>\n                    <Map className=\"mapStyle\" center={[0,0]} zoom={2}>\n                      <TileLayer attribute=\"\" url={'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'} />\n                      <Markers {...result} />\n                    </Map>\n                  </div>\n              )}}\n                </Query>\n\n              </ApolloProvider>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}