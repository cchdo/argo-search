{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["VectorGrid","withLeaflet","VectorGridDefault","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","marker2x","iconUrl","marker","shadowUrl","markerShadow","client","ApolloClient","uri","GET_GEO_PROFILES","gql","ArgoTable","loading","error","data","supportsBigInt","window","a","Zip","default","streamSaver","readable","writable","writer","getWriter","createWriteStream","files","argo_profiles","map","prof","file","values","ReadableStream","pull","ctrl","next","done","value","enqueue","name","lastModified","Date","stream","Response","body","close","fetch","split","pop","pipeThrough","pipeTo","length","onClick","profilesDownload","float_id","date","geography","key","Markers","featureCollection","type","features","geometry","properties","style","radius","weight","opacity","color","fillColor","fillOpacity","fill","stroke","zIndex","popup","layer","App","geo","useState","collapsed","setCollapsed","selected","setSelected","location","hash","search","line","decodeURIComponent","slice","console","log","JSON","parse","useQuery","variables","id","position","closeIcon","onOpen","onClose","header","icon","Map","className","center","zoom","TileLayer","attribute","url","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eca8fddb.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport { Map, TileLayer, withLeaflet} from 'react-leaflet';\nimport { CircleMarker, Popup } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { Sidebar, Tab } from 'react-leaflet-sidetabs';\n\nimport ApolloClient from \"apollo-boost\";\nimport { gql } from \"apollo-boost\";\n\nimport { ApolloProvider } from \"react-apollo\";\nimport {useQuery} from '@apollo/react-hooks';\n\nimport { FiChevronRight, FiSearch} from \"react-icons/fi\";\n\nimport L from 'leaflet';\nimport marker from 'leaflet/dist/images/marker-icon.png';\nimport marker2x from 'leaflet/dist/images/marker-icon-2x.png';\nimport markerShadow from 'leaflet/dist/images/marker-shadow.png';\nimport VectorGridDefault from 'react-leaflet-vectorgrid';\n\nconst VectorGrid = withLeaflet(VectorGridDefault)\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: marker2x,\n  iconUrl: marker,\n  shadowUrl: markerShadow\n});\n\nconst client = new ApolloClient({\n  uri: \"https://cchdo.ucsd.edu/v1/graphql\"\n});\n\n\nconst GET_LATEST_PROFILES = gql`\n        query LatestProfiles($number: Int!){\n          argo_profiles(limit: $number, order_by: {date: desc}, where: { _and: {geography: {_is_null: false}, date: {_is_null: false}}}) {\n            date\n            float_id\n            geography\n            file\n          }\n        }\n`;\n\nconst GET_GEO_PROFILES = gql`\n  query GeoProfiles($geo: geography!) {\n    argo_profiles(order_by: {date: desc}, where: {_and: {geography: {_st_d_within: {from: $geo, distance:10000}}, date: {_is_null: false}}}) {\n      date\n      float_id\n      geography\n      file\n    }\n  }\n`;\n\n\nconst ArgoTable = ({ loading, error, data }) => {\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error ...</p>;\n\n  const supportsBigInt = (\"BigInt\" in window);\n\n\n  async function profilesDownload(data){\n    const {default: Zip} = await import(\"@transcend-io/conflux/write\");\n    const streamSaver = await import(\"streamsaver\");\n\n    const { readable, writable } = new Zip();\n    const writer = writable.getWriter();\n\n    const fileStream = streamSaver.createWriteStream('argo_profiles.zip');\n    const base = \"https://tmp.h2o.ucsd.edu/202002-ArgoData/dac/\";\n    const files = data.argo_profiles.map((prof) => prof.file).values()\n\n\n    new ReadableStream({\n      // pull gets executed whenever some\n      // other stream request more data\n      async pull(ctrl) {\n        const { done, value } = files.next()\n        if (done) {\n          ctrl.enqueue({\n            name: '/citation.txt',\n            lastModified: new Date(0),\n            stream: () => new Response('Argo (2020). Argo float data and metadata from Global Data Assembly Centre (Argo GDAC) - Snapshot of Argo GDAC of February 10st 2020. SEANOE. https://doi.org/10.17882/42182#70590').body\n          })\n          return ctrl.close()\n        }\n        const { body } = await fetch(base + value);\n        ctrl.enqueue({\n          name: `/profiles/${value.split(\"/\").pop()}`,\n          stream: () => body\n        })\n      }\n    })\n    .pipeThrough(new Zip())\n    .pipeTo(streamSaver.createWriteStream('argo_profiles.zip'));\n\n\n    writer.close();\n  }\n  \n  return (\n    <>\n    <h5>{data.argo_profiles.length} Profiles</h5>\n    {supportsBigInt ? <button onClick={(() => profilesDownload(data))}>Download Profiles</button> : <span>Bulk Downloads not supported</span>}\n    <div>\n    {data.argo_profiles.map(({file,  float_id, date, geography }) => (\n    <div key={file}>\n      <p>{float_id}: {date}<br /><small>{file}</small></p>\n    </div>\n  ))}\n  </div>\n  </>\n  )\n}\n\nconst Markers = ({ loading, error, data }) => {\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error ...</p>;\n  const featureCollection = {\n    type: \"FeatureCollection\",\n    features: data.argo_profiles.map(({file, date, float_id, geography}) => {\n      return {type: \"Feature\", geometry: geography, properties:{float_id:float_id, date:date, file:file}}\n    })\n  }\n\n  return <VectorGrid type=\"slicer\" style={{\n    radius: 4,\n    weight: 0.5,\n    opacity: 1,\n    color: '#3388ff',\n    fillColor: '#3388ff',\n    fillOpacity: 0.6,\n    fill: true,\n    stroke: true\n}} data={featureCollection} zIndex={401} popup={(layer) => `<div><h3>Float ID:${layer.properties.float_id}</h3>Profile Date: ${layer.properties.date}<br/><a href=\"https://tmp.h2o.ucsd.edu/202002-ArgoData/dac/${layer.properties.file}\">Download netCDF</a></div>`} />\n\n\n  //return data.argo_profiles.map(({file, float_id, geography }) => (\n  //  <CircleMarker key={file} radius={4} center={[geography.coordinates[1], geography.coordinates[0]]}>\n  //    <Popup>\n  //      <h3>Argo Float: {float_id}</h3>\n\n  //      <a href={\"https://tmp.h2o.ucsd.edu/202002-ArgoData/dac/\" +file}>Download Profile</a>\n  //    </Popup>\n  //  </CircleMarker>\n  //));\n}\n\nfunction App() {\n\n  const [collapsed, setCollapsed] = useState(false)\n  const [selected, setSelected] = useState('firstten');\n  const [search, setSearch] = useState(window.location.hash)\n\n  const line = decodeURIComponent(search.slice(1));\n  console.log(line)\n  let geo;\n  try {\n    geo = JSON.parse(line)\n  } catch (error) {\n    geo = {}\n  }\n\n  const {loading, error, data } = useQuery(GET_GEO_PROFILES, {\n    client: client,\n    variables: {geo: geo}\n  })\n\n\n  return (\n    <ApolloProvider client={client}>\n      <div>\n        <Sidebar\n          id=\"sidebar\"\n          position=\"right\"\n          collapsed={collapsed}\n          closeIcon={<FiChevronRight />}\n          selected={selected}\n          onOpen={(id) => { setSelected(id); setCollapsed(false) }}\n          onClose={() => setCollapsed(true)}\n        >\n          <Tab id=\"firstten\" header=\"Profile List\" icon={<FiSearch />}>\n            <div>\n              <ArgoTable loading={loading} error={error} data={data} />\n            </div>\n          </Tab>\n        </Sidebar>\n        <Map className=\"mapStyle\" center={[0, 0]} zoom={2}>\n          <TileLayer attribute=\"\" url={'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'} />\n          <Markers loading={loading} error={error} data={data} />\n        </Map>\n      </div>\n    </ApolloProvider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}